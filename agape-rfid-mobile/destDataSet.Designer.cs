//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3607.
// 
namespace agape_rfid_mobile {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("destDataSet")]
    public partial class destDataSet : global::System.Data.DataSet {
        
        private AGAPE_RFID_TDataTable tableAGAPE_RFID_T;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public destDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AGAPE_RFID_TDataTable AGAPE_RFID_T {
            get {
                return this.tableAGAPE_RFID_T;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            destDataSet cln = ((destDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AGAPE_RFID_T"] != null)) {
                    base.Tables.Add(new AGAPE_RFID_TDataTable(ds.Tables["AGAPE_RFID_T"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAGAPE_RFID_T = ((AGAPE_RFID_TDataTable)(base.Tables["AGAPE_RFID_T"]));
            if ((initTable == true)) {
                if ((this.tableAGAPE_RFID_T != null)) {
                    this.tableAGAPE_RFID_T.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "destDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/destDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAGAPE_RFID_T = new AGAPE_RFID_TDataTable();
            base.Tables.Add(this.tableAGAPE_RFID_T);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAGAPE_RFID_T() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            destDataSet ds = new destDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AGAPE_RFID_TRowChangeEventHandler(object sender, AGAPE_RFID_TRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AGAPE_RFID_TDataTable : global::System.Data.TypedTableBase<AGAPE_RFID_TRow> {
            
            private global::System.Data.DataColumn columnNumeroOrdine;
            
            private global::System.Data.DataColumn columnDataOrdine;
            
            private global::System.Data.DataColumn columnProgressivoArticolo;
            
            private global::System.Data.DataColumn columnCodArt;
            
            private global::System.Data.DataColumn columnDescrizioneArticolo;
            
            private global::System.Data.DataColumn columnCodRivenditore;
            
            private global::System.Data.DataColumn columnAnagraficaRivenditore;
            
            private global::System.Data.DataColumn columnCodCliente;
            
            private global::System.Data.DataColumn columnAnagraficaCliente;
            
            private global::System.Data.DataColumn columnCodMatricola;
            
            private global::System.Data.DataColumn columnDataUscita;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TDataTable() {
                this.TableName = "AGAPE_RFID_T";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AGAPE_RFID_TDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumeroOrdineColumn {
                get {
                    return this.columnNumeroOrdine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataOrdineColumn {
                get {
                    return this.columnDataOrdine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgressivoArticoloColumn {
                get {
                    return this.columnProgressivoArticolo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodArtColumn {
                get {
                    return this.columnCodArt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescrizioneArticoloColumn {
                get {
                    return this.columnDescrizioneArticolo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodRivenditoreColumn {
                get {
                    return this.columnCodRivenditore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnagraficaRivenditoreColumn {
                get {
                    return this.columnAnagraficaRivenditore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodClienteColumn {
                get {
                    return this.columnCodCliente;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnagraficaClienteColumn {
                get {
                    return this.columnAnagraficaCliente;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodMatricolaColumn {
                get {
                    return this.columnCodMatricola;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataUscitaColumn {
                get {
                    return this.columnDataUscita;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRow this[int index] {
                get {
                    return ((AGAPE_RFID_TRow)(this.Rows[index]));
                }
            }
            
            public event AGAPE_RFID_TRowChangeEventHandler AGAPE_RFID_TRowChanging;
            
            public event AGAPE_RFID_TRowChangeEventHandler AGAPE_RFID_TRowChanged;
            
            public event AGAPE_RFID_TRowChangeEventHandler AGAPE_RFID_TRowDeleting;
            
            public event AGAPE_RFID_TRowChangeEventHandler AGAPE_RFID_TRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAGAPE_RFID_TRow(AGAPE_RFID_TRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRow AddAGAPE_RFID_TRow(string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo, string CodArt, string DescrizioneArticolo, string CodRivenditore, string AnagraficaRivenditore, string CodCliente, string AnagraficaCliente, string CodMatricola, System.DateTime DataUscita) {
                AGAPE_RFID_TRow rowAGAPE_RFID_TRow = ((AGAPE_RFID_TRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NumeroOrdine,
                        DataOrdine,
                        ProgressivoArticolo,
                        CodArt,
                        DescrizioneArticolo,
                        CodRivenditore,
                        AnagraficaRivenditore,
                        CodCliente,
                        AnagraficaCliente,
                        CodMatricola,
                        DataUscita};
                rowAGAPE_RFID_TRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAGAPE_RFID_TRow);
                return rowAGAPE_RFID_TRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRow FindByNumeroOrdineDataOrdineProgressivoArticolo(string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo) {
                return ((AGAPE_RFID_TRow)(this.Rows.Find(new object[] {
                            NumeroOrdine,
                            DataOrdine,
                            ProgressivoArticolo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AGAPE_RFID_TDataTable cln = ((AGAPE_RFID_TDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AGAPE_RFID_TDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumeroOrdine = base.Columns["NumeroOrdine"];
                this.columnDataOrdine = base.Columns["DataOrdine"];
                this.columnProgressivoArticolo = base.Columns["ProgressivoArticolo"];
                this.columnCodArt = base.Columns["CodArt"];
                this.columnDescrizioneArticolo = base.Columns["DescrizioneArticolo"];
                this.columnCodRivenditore = base.Columns["CodRivenditore"];
                this.columnAnagraficaRivenditore = base.Columns["AnagraficaRivenditore"];
                this.columnCodCliente = base.Columns["CodCliente"];
                this.columnAnagraficaCliente = base.Columns["AnagraficaCliente"];
                this.columnCodMatricola = base.Columns["CodMatricola"];
                this.columnDataUscita = base.Columns["DataUscita"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumeroOrdine = new global::System.Data.DataColumn("NumeroOrdine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumeroOrdine);
                this.columnDataOrdine = new global::System.Data.DataColumn("DataOrdine", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataOrdine);
                this.columnProgressivoArticolo = new global::System.Data.DataColumn("ProgressivoArticolo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgressivoArticolo);
                this.columnCodArt = new global::System.Data.DataColumn("CodArt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodArt);
                this.columnDescrizioneArticolo = new global::System.Data.DataColumn("DescrizioneArticolo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescrizioneArticolo);
                this.columnCodRivenditore = new global::System.Data.DataColumn("CodRivenditore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodRivenditore);
                this.columnAnagraficaRivenditore = new global::System.Data.DataColumn("AnagraficaRivenditore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnagraficaRivenditore);
                this.columnCodCliente = new global::System.Data.DataColumn("CodCliente", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodCliente);
                this.columnAnagraficaCliente = new global::System.Data.DataColumn("AnagraficaCliente", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnagraficaCliente);
                this.columnCodMatricola = new global::System.Data.DataColumn("CodMatricola", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodMatricola);
                this.columnDataUscita = new global::System.Data.DataColumn("DataUscita", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataUscita);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNumeroOrdine,
                                this.columnDataOrdine,
                                this.columnProgressivoArticolo}, true));
                this.columnNumeroOrdine.AllowDBNull = false;
                this.columnNumeroOrdine.MaxLength = 50;
                this.columnDataOrdine.AllowDBNull = false;
                this.columnProgressivoArticolo.AllowDBNull = false;
                this.columnProgressivoArticolo.MaxLength = 50;
                this.columnCodArt.MaxLength = 50;
                this.columnDescrizioneArticolo.MaxLength = 50;
                this.columnCodRivenditore.MaxLength = 50;
                this.columnAnagraficaRivenditore.MaxLength = 50;
                this.columnCodCliente.MaxLength = 50;
                this.columnAnagraficaCliente.MaxLength = 50;
                this.columnCodMatricola.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRow NewAGAPE_RFID_TRow() {
                return ((AGAPE_RFID_TRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AGAPE_RFID_TRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AGAPE_RFID_TRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AGAPE_RFID_TRowChanged != null)) {
                    this.AGAPE_RFID_TRowChanged(this, new AGAPE_RFID_TRowChangeEvent(((AGAPE_RFID_TRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AGAPE_RFID_TRowChanging != null)) {
                    this.AGAPE_RFID_TRowChanging(this, new AGAPE_RFID_TRowChangeEvent(((AGAPE_RFID_TRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AGAPE_RFID_TRowDeleted != null)) {
                    this.AGAPE_RFID_TRowDeleted(this, new AGAPE_RFID_TRowChangeEvent(((AGAPE_RFID_TRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AGAPE_RFID_TRowDeleting != null)) {
                    this.AGAPE_RFID_TRowDeleting(this, new AGAPE_RFID_TRowChangeEvent(((AGAPE_RFID_TRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAGAPE_RFID_TRow(AGAPE_RFID_TRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                destDataSet ds = new destDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AGAPE_RFID_TDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AGAPE_RFID_TRow : global::System.Data.DataRow {
            
            private AGAPE_RFID_TDataTable tableAGAPE_RFID_T;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AGAPE_RFID_TRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAGAPE_RFID_T = ((AGAPE_RFID_TDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumeroOrdine {
                get {
                    return ((string)(this[this.tableAGAPE_RFID_T.NumeroOrdineColumn]));
                }
                set {
                    this[this.tableAGAPE_RFID_T.NumeroOrdineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataOrdine {
                get {
                    return ((global::System.DateTime)(this[this.tableAGAPE_RFID_T.DataOrdineColumn]));
                }
                set {
                    this[this.tableAGAPE_RFID_T.DataOrdineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgressivoArticolo {
                get {
                    return ((string)(this[this.tableAGAPE_RFID_T.ProgressivoArticoloColumn]));
                }
                set {
                    this[this.tableAGAPE_RFID_T.ProgressivoArticoloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodArt {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.CodArtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CodArt\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.CodArtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescrizioneArticolo {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.DescrizioneArticoloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescrizioneArticolo\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.DescrizioneArticoloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodRivenditore {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.CodRivenditoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CodRivenditore\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.CodRivenditoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AnagraficaRivenditore {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.AnagraficaRivenditoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnagraficaRivenditore\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.AnagraficaRivenditoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodCliente {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.CodClienteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CodCliente\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.CodClienteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AnagraficaCliente {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.AnagraficaClienteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnagraficaCliente\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.AnagraficaClienteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodMatricola {
                get {
                    try {
                        return ((string)(this[this.tableAGAPE_RFID_T.CodMatricolaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CodMatricola\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.CodMatricolaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DataUscita {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAGAPE_RFID_T.DataUscitaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataUscita\' in table \'AGAPE_RFID_T\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAGAPE_RFID_T.DataUscitaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodArtNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.CodArtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodArtNull() {
                this[this.tableAGAPE_RFID_T.CodArtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescrizioneArticoloNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.DescrizioneArticoloColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescrizioneArticoloNull() {
                this[this.tableAGAPE_RFID_T.DescrizioneArticoloColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodRivenditoreNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.CodRivenditoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodRivenditoreNull() {
                this[this.tableAGAPE_RFID_T.CodRivenditoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnagraficaRivenditoreNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.AnagraficaRivenditoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnagraficaRivenditoreNull() {
                this[this.tableAGAPE_RFID_T.AnagraficaRivenditoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodClienteNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.CodClienteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodClienteNull() {
                this[this.tableAGAPE_RFID_T.CodClienteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnagraficaClienteNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.AnagraficaClienteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnagraficaClienteNull() {
                this[this.tableAGAPE_RFID_T.AnagraficaClienteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodMatricolaNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.CodMatricolaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodMatricolaNull() {
                this[this.tableAGAPE_RFID_T.CodMatricolaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataUscitaNull() {
                return this.IsNull(this.tableAGAPE_RFID_T.DataUscitaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataUscitaNull() {
                this[this.tableAGAPE_RFID_T.DataUscitaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class AGAPE_RFID_TRowChangeEvent : global::System.EventArgs {
            
            private AGAPE_RFID_TRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRowChangeEvent(AGAPE_RFID_TRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AGAPE_RFID_TRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace agape_rfid_mobile.destDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class AGAPE_RFID_TTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AGAPE_RFID_TTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AGAPE_RFID_T";
            tableMapping.ColumnMappings.Add("NumeroOrdine", "NumeroOrdine");
            tableMapping.ColumnMappings.Add("DataOrdine", "DataOrdine");
            tableMapping.ColumnMappings.Add("ProgressivoArticolo", "ProgressivoArticolo");
            tableMapping.ColumnMappings.Add("CodArt", "CodArt");
            tableMapping.ColumnMappings.Add("DescrizioneArticolo", "DescrizioneArticolo");
            tableMapping.ColumnMappings.Add("CodRivenditore", "CodRivenditore");
            tableMapping.ColumnMappings.Add("AnagraficaRivenditore", "AnagraficaRivenditore");
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente");
            tableMapping.ColumnMappings.Add("AnagraficaCliente", "AnagraficaCliente");
            tableMapping.ColumnMappings.Add("CodMatricola", "CodMatricola");
            tableMapping.ColumnMappings.Add("DataUscita", "DataUscita");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [AGAPE_RFID_T] WHERE (([NumeroOrdine] = @Original_NumeroOrdine) AND (" +
                "[DataOrdine] = @Original_DataOrdine) AND ([ProgressivoArticolo] = @Original_Prog" +
                "ressivoArticolo))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_NumeroOrdine";
            param.IsNullable = true;
            param.SourceColumn = "NumeroOrdine";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DataOrdine";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataOrdine";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProgressivoArticolo";
            param.IsNullable = true;
            param.SourceColumn = "ProgressivoArticolo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [AGAPE_RFID_T] ([NumeroOrdine], [DataOrdine], [ProgressivoArticolo], [CodArt], [DescrizioneArticolo], [CodRivenditore], [AnagraficaRivenditore], [CodCliente], [AnagraficaCliente], [CodMatricola], [DataUscita]) VALUES (@NumeroOrdine, @DataOrdine, @ProgressivoArticolo, @CodArt, @DescrizioneArticolo, @CodRivenditore, @AnagraficaRivenditore, @CodCliente, @AnagraficaCliente, @CodMatricola, @DataUscita);
SELECT NumeroOrdine, DataOrdine, ProgressivoArticolo, CodArt, DescrizioneArticolo, CodRivenditore, AnagraficaRivenditore, CodCliente, AnagraficaCliente, CodMatricola, DataUscita FROM AGAPE_RFID_T WHERE (DataOrdine = @DataOrdine) AND (NumeroOrdine = @NumeroOrdine) AND (ProgressivoArticolo = @ProgressivoArticolo)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NumeroOrdine";
            param.IsNullable = true;
            param.SourceColumn = "NumeroOrdine";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataOrdine";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataOrdine";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProgressivoArticolo";
            param.IsNullable = true;
            param.SourceColumn = "ProgressivoArticolo";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodArt";
            param.IsNullable = true;
            param.SourceColumn = "CodArt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DescrizioneArticolo";
            param.IsNullable = true;
            param.SourceColumn = "DescrizioneArticolo";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodRivenditore";
            param.IsNullable = true;
            param.SourceColumn = "CodRivenditore";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@AnagraficaRivenditore";
            param.IsNullable = true;
            param.SourceColumn = "AnagraficaRivenditore";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodCliente";
            param.IsNullable = true;
            param.SourceColumn = "CodCliente";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@AnagraficaCliente";
            param.IsNullable = true;
            param.SourceColumn = "AnagraficaCliente";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodMatricola";
            param.IsNullable = true;
            param.SourceColumn = "CodMatricola";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataUscita";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataUscita";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AGAPE_RFID_T] SET [NumeroOrdine] = @NumeroOrdine, [DataOrdine] = @DataOrdine, [ProgressivoArticolo] = @ProgressivoArticolo, [CodArt] = @CodArt, [DescrizioneArticolo] = @DescrizioneArticolo, [CodRivenditore] = @CodRivenditore, [AnagraficaRivenditore] = @AnagraficaRivenditore, [CodCliente] = @CodCliente, [AnagraficaCliente] = @AnagraficaCliente, [CodMatricola] = @CodMatricola, [DataUscita] = @DataUscita WHERE (([NumeroOrdine] = @Original_NumeroOrdine) AND ([DataOrdine] = @Original_DataOrdine) AND ([ProgressivoArticolo] = @Original_ProgressivoArticolo));
SELECT NumeroOrdine, DataOrdine, ProgressivoArticolo, CodArt, DescrizioneArticolo, CodRivenditore, AnagraficaRivenditore, CodCliente, AnagraficaCliente, CodMatricola, DataUscita FROM AGAPE_RFID_T WHERE (DataOrdine = @DataOrdine) AND (NumeroOrdine = @NumeroOrdine) AND (ProgressivoArticolo = @ProgressivoArticolo)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NumeroOrdine";
            param.IsNullable = true;
            param.SourceColumn = "NumeroOrdine";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataOrdine";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataOrdine";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProgressivoArticolo";
            param.IsNullable = true;
            param.SourceColumn = "ProgressivoArticolo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodArt";
            param.IsNullable = true;
            param.SourceColumn = "CodArt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DescrizioneArticolo";
            param.IsNullable = true;
            param.SourceColumn = "DescrizioneArticolo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodRivenditore";
            param.IsNullable = true;
            param.SourceColumn = "CodRivenditore";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@AnagraficaRivenditore";
            param.IsNullable = true;
            param.SourceColumn = "AnagraficaRivenditore";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodCliente";
            param.IsNullable = true;
            param.SourceColumn = "CodCliente";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@AnagraficaCliente";
            param.IsNullable = true;
            param.SourceColumn = "AnagraficaCliente";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CodMatricola";
            param.IsNullable = true;
            param.SourceColumn = "CodMatricola";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataUscita";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataUscita";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_NumeroOrdine";
            param.IsNullable = true;
            param.SourceColumn = "NumeroOrdine";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DataOrdine";
            param.DbType = global::System.Data.DbType.Date;
            param.IsNullable = true;
            param.SourceColumn = "DataOrdine";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProgressivoArticolo";
            param.IsNullable = true;
            param.SourceColumn = "ProgressivoArticolo";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=192.168.1.4\\SQLEXPRESS;Initial Catalog=agape;User ID=agape;Password=a" +
                "gape;";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     NumeroOrdine, DataOrdine, ProgressivoArticolo, CodArt, DescrizioneArti" +
                "colo, CodRivenditore, AnagraficaRivenditore, CodCliente, AnagraficaCliente, \r\n  " +
                "                    CodMatricola, DataUscita\r\nFROM         AGAPE_RFID_T";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     NumeroOrdine, DataOrdine, ProgressivoArticolo, CodArt, DescrizioneArticolo, CodRivenditore, AnagraficaRivenditore, CodCliente, AnagraficaCliente, 
                      CodMatricola, DataUscita
FROM         AGAPE_RFID_T
WHERE     (NumeroOrdine = @NumeroOrdine) AND (DataOrdine = @DataOrdine) AND (ProgressivoArticolo = @ProgressivoArticolo)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NumeroOrdine";
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "NumeroOrdine";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataOrdine";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 3;
            param.IsNullable = true;
            param.SourceColumn = "DataOrdine";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProgressivoArticolo";
            param.Size = 50;
            param.IsNullable = true;
            param.SourceColumn = "ProgressivoArticolo";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(destDataSet.AGAPE_RFID_TDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual destDataSet.AGAPE_RFID_TDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            destDataSet.AGAPE_RFID_TDataTable dataTable = new destDataSet.AGAPE_RFID_TDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByKey(destDataSet.AGAPE_RFID_TDataTable dataTable, string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("NumeroOrdine");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(NumeroOrdine));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataOrdine));
            if ((ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("ProgressivoArticolo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ProgressivoArticolo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual destDataSet.AGAPE_RFID_TDataTable GetDataByKey(string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("NumeroOrdine");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(NumeroOrdine));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DataOrdine));
            if ((ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("ProgressivoArticolo");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ProgressivoArticolo));
            }
            destDataSet.AGAPE_RFID_TDataTable dataTable = new destDataSet.AGAPE_RFID_TDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(destDataSet.AGAPE_RFID_TDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(destDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AGAPE_RFID_T");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_NumeroOrdine, System.DateTime Original_DataOrdine, string Original_ProgressivoArticolo) {
            if ((Original_NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("Original_NumeroOrdine");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_NumeroOrdine));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_DataOrdine));
            if ((Original_ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("Original_ProgressivoArticolo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ProgressivoArticolo));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo, string CodArt, string DescrizioneArticolo, string CodRivenditore, string AnagraficaRivenditore, string CodCliente, string AnagraficaCliente, string CodMatricola, global::System.Nullable<global::System.DateTime> DataUscita) {
            if ((NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("NumeroOrdine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NumeroOrdine));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(DataOrdine));
            if ((ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("ProgressivoArticolo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ProgressivoArticolo));
            }
            if ((CodArt == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CodArt));
            }
            if ((DescrizioneArticolo == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DescrizioneArticolo));
            }
            if ((CodRivenditore == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CodRivenditore));
            }
            if ((AnagraficaRivenditore == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(AnagraficaRivenditore));
            }
            if ((CodCliente == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CodCliente));
            }
            if ((AnagraficaCliente == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(AnagraficaCliente));
            }
            if ((CodMatricola == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CodMatricola));
            }
            if ((DataUscita.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(DataUscita.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NumeroOrdine, System.DateTime DataOrdine, string ProgressivoArticolo, string CodArt, string DescrizioneArticolo, string CodRivenditore, string AnagraficaRivenditore, string CodCliente, string AnagraficaCliente, string CodMatricola, global::System.Nullable<global::System.DateTime> DataUscita, string Original_NumeroOrdine, System.DateTime Original_DataOrdine, string Original_ProgressivoArticolo) {
            if ((NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("NumeroOrdine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NumeroOrdine));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(DataOrdine));
            if ((ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("ProgressivoArticolo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ProgressivoArticolo));
            }
            if ((CodArt == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CodArt));
            }
            if ((DescrizioneArticolo == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DescrizioneArticolo));
            }
            if ((CodRivenditore == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CodRivenditore));
            }
            if ((AnagraficaRivenditore == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(AnagraficaRivenditore));
            }
            if ((CodCliente == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CodCliente));
            }
            if ((AnagraficaCliente == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(AnagraficaCliente));
            }
            if ((CodMatricola == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CodMatricola));
            }
            if ((DataUscita.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(DataUscita.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_NumeroOrdine == null)) {
                throw new global::System.ArgumentNullException("Original_NumeroOrdine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_NumeroOrdine));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_DataOrdine));
            if ((Original_ProgressivoArticolo == null)) {
                throw new global::System.ArgumentNullException("Original_ProgressivoArticolo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ProgressivoArticolo));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CodArt, string DescrizioneArticolo, string CodRivenditore, string AnagraficaRivenditore, string CodCliente, string AnagraficaCliente, string CodMatricola, global::System.Nullable<global::System.DateTime> DataUscita, string Original_NumeroOrdine, System.DateTime Original_DataOrdine, string Original_ProgressivoArticolo) {
            return this.Update(Original_NumeroOrdine, Original_DataOrdine, Original_ProgressivoArticolo, CodArt, DescrizioneArticolo, CodRivenditore, AnagraficaRivenditore, CodCliente, AnagraficaCliente, CodMatricola, DataUscita, Original_NumeroOrdine, Original_DataOrdine, Original_ProgressivoArticolo);
        }
    }
}
namespace destDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
